<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<ProxyEndpoint name="Acme-Bank-AccountProxyEndpoint">
   <Description>Acme Bank Account</Description>
   <FaultRules>
      <FaultRule name="SecurityFaultHandling">
         <Step>
            <Name>SF-SecurityFaultCallout</Name>
         </Step>
         <Condition>((oauthV2.VerifyAccessToken.failed equals true) or ((oauthV2.VerifyAPIKey.failed equals true) or (BasicAuthentication.DecodeBasicAuthentication.failed equals true) or (acl.AccessControl.failed equals true) or (oauthV2.failed equals true) or (authFlag equals false) or (isValidToken equals false)))</Condition>
      </FaultRule>
      <FaultRule name="TrafficManagementFaultHandling">
         <Step>
            <Name>SF-TrafficManagementFault</Name>
         </Step>
         <Condition>((ratelimit.SpikeArrest.failed equals true) or ((ratelimit.QuotaAtProductLevel.failed equals true)))</Condition>
      </FaultRule>
      <FaultRule name="ThreatFaultHandling">
         <Step>
            <Name>SF-ThreatFault</Name>
         </Step>
         <Condition>((jsonattack.cf-JSONThreatProtection.DoSAEvaluation.failed equals true) or (threatProtectionEvaluationStatus == "failed"))</Condition>
      </FaultRule>
   </FaultRules>
   <DefaultFaultRule name="All">
      <AlwaysEnforce>true</AlwaysEnforce>
      <Step>
         <Name>SF-DefaultFaultCallout</Name>
      </Step>
      <AlwaysEnforce>true</AlwaysEnforce>
   </DefaultFaultRule>
   <PreFlow name="PreFlow">
      <Request>
         <Step>
            <Name>cf-set-log-variables</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>cf-Generate-Message-Correlation-ID</Name>
         </Step>
         <Step>
            <Name>SF-Proxy-Current-Flow-Name</Name>
         </Step>
         <Step>
            <Name>SF-Log-Preflow-Request</Name>
         </Step>
         <Step>
            <Condition>(request.header.Authorization equals null) and (log.proxyVerb != "OPTIONS")</Condition>
            <Name>cf-data-validation-Authorization</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>SF-SpikeArrestCallout-Environment</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS") and (request.header.Content-Length != 0)</Condition>
            <Name>SF-JSONThreatValidation</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>SF-ThreatProtection</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>SF-Validate-Access-Token</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>SF-QuotaAtProductLevel</Name>
         </Step>
      </Request>
      <Response>
      </Response>
   </PreFlow>
   <Flows>
      <Flow name="WrongAccept">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Fault-Unsupported-AcceptType</Name>
            </Step>
         </Request>
         <Response/>
         <Condition>(log.proxyVerb != "OPTIONS") and (!(log.Accept JavaRegex "(text\/xml)(;.*)|(.*;)(text\/xml)(;.*)|text\/xml|(.*;)(text\/xml)|(application\/xml)(;.*)|(.*;)(application\/xml)(;.*)|application\/xml|(.*;)(application\/xml)|(application\/json)(;.*)|(.*;)(application\/json)(;.*)|application\/json|(.*;)(application\/json)"))</Condition>
      </Flow>
      <Flow name="WrongContentType">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Fault-Unsupported-ContentType</Name>
            </Step>
         </Request>
         <Response/>
         <Condition>(log.proxyVerb != "OPTIONS") and ((!(request.content = "")) and (!(request.content is null)) and !(log.Content-Type JavaRegex "(text\/xml)(;.*)|(.*;)(text\/xml)(;.*)|text\/xml|(.*;)(text\/xml)|(application\/xml)(;.*)|(.*;)(application\/xml)(;.*)|application\/xml|(.*;)(application\/xml)|(application\/json)(;.*)|(.*;)(application\/json)(;.*)|application\/json|(.*;)(application\/json)"))</Condition>
      </Flow>
      <Flow name="findAllBankAccounts">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-findAllBankAccounts</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="addBankAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-addBankAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="updateBankAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-updateBankAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <Flow name="depositInBankAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-depositInBankAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account/deposit-amount&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <Flow name="withdrawFromBankAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-withdrawFromBankAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account/withdraw-amount&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <Flow name="findBankAccountById">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-findBankAccountById</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account/{id}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="deleteBankAccountById">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-deleteBankAccountById</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/bank-account/{id}&quot;) and (request.verb= &quot;DELETE&quot;)</Condition>
      </Flow>
      <Flow name="depositInPrimaryAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-depositInPrimaryAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/deposit-amount/{id}&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <Flow name="findAllPrimaryAccounts">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-findAllPrimaryAccounts</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/primary-account&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="addPrimaryAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-addPrimaryAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/primary-account&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="updatePrimaryAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-updatePrimaryAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/primary-account&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <Flow name="findPrimaryAccountById">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-findPrimaryAccountById</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/primary-account/{id}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="deletePrimaryAccountById">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-deletePrimaryAccountById</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/primary-account/{id}&quot;) and (request.verb= &quot;DELETE&quot;)</Condition>
      </Flow>
      <Flow name="withdrawFromPrimaryAccount">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Condition>(request.header.x-tenant equals null)</Condition>
               <Name>cf-data-validation-header</Name>
            </Step>
            <Step>
               <Condition>(request.header.Content-Length equals 0) and (request.verb!= "GET") and (request.verb!= "DELETE")</Condition>
               <Name>cf-data-validation-payload</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-withdrawFromPrimaryAccount</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/primary-account/withdraw-amount/{id}&quot;) and (request.verb= &quot;PUT&quot;)</Condition>
      </Flow>
      <!-- CORS Preflight flow-->
      <Flow name="CORS">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-getCORSDomainList</Name>
            </Step>
         </Request>
         <Response>
            <Step>
               <Name>cf-CORSValidation</Name>
            </Step>
         </Response>
         <Condition>(log.proxyVerb == "OPTIONS") and (log.origin != null)</Condition>
      </Flow>
      <Flow name="unknown-resource">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Unknown-Resource</Name>
            </Step>
         </Request>
         <Response/>
      </Flow>
   </Flows>
   <PostFlow name="PostFlow">
      <Request></Request>
      <Response>
         <Step>
            <Name>SF-Log-Collector</Name>
         </Step>
      </Response>
   </PostFlow>
   <PostClientFlow>
        <Request/>
        <Response>
        </Response>
    </PostClientFlow>
   <HTTPProxyConnection>
      <BasePath>/v1/{domain}/{environment}/</BasePath>
      <VirtualHost>default</VirtualHost>
      <VirtualHost>secure</VirtualHost>
   </HTTPProxyConnection>
   <RouteRule name="NoRoute">
      <Condition>(request.verb == "OPTIONS")</Condition>
   </RouteRule>
   <RouteRule name="Acme-Bank-Account">
      <Condition>(target.route.service = &quot;Acme-Bank-Account&quot;)</Condition>
      <TargetEndpoint>Acme-Bank-Account</TargetEndpoint>
   </RouteRule>
</ProxyEndpoint>
